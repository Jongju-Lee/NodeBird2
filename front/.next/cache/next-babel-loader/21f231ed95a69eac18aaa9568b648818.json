{"ast":null,"code":"import shortId from \"shortid\";\nimport { produce } from \"immer\";\nimport { faker } from \"@faker-js/faker\";\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map((it, idx) => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.internet.userName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.url()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.internet.userName()\n    },\n    content: faker.lorem.paragraph()\n  }]\n})));\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"주종이\"\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"이죵주\"\n  }\n});\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    // state의 이름이 draft로 바뀜\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(action.data.content);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","it","idx","id","generate","User","nickname","internet","userName","content","lorem","paragraph","Images","src","image","url","Comments","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","removePostLoading","removePostDone","removePostError","filter","v","post","find","postId"],"sources":["C:/web/MyPortfolio/nodebird2/front/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\r\nimport { produce } from \"immer\";\r\nimport { faker } from \"@faker-js/faker\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n  Array(20)\r\n    .fill()\r\n    .map((it, idx) => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.internet.userName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.url(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.internet.userName(),\r\n          },\r\n          content: faker.lorem.paragraph(),\r\n        },\r\n      ],\r\n    }))\r\n);\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"주종이\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"이죵주\",\r\n  },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    // state의 이름이 draft로 바뀜\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(action.data.content);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}