{"ast":null,"code":"import shortId from \"shortid\";\nimport { produce } from \"immer\";\nimport { faker } from \"@faker-js/faker\";\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.internet.userName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.url()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.internet.userName()\n        },\n        content: faker.lorem.paragraph()\n      }]\n    };\n  });\n};\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport var LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport var LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport var LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"주종이\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"이죵주\"\n    }\n  };\n};\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    // state의 이름이 draft로 바뀜\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(action.data.content);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","internet","userName","content","lorem","paragraph","Images","src","image","url","Comments","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","arguments","length","undefined","action","draft","error","unshift","filter","v","post","find","postId"],"sources":["C:/web/MyPortfolio/nodebird2/front/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\r\nimport { produce } from \"immer\";\r\nimport { faker } from \"@faker-js/faker\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) =>\r\n  Array(number)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.internet.userName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.url(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.internet.userName(),\r\n          },\r\n          content: faker.lorem.paragraph(),\r\n        },\r\n      ],\r\n    }));\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"주종이\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"이죵주\",\r\n  },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    // state의 이름이 draft로 바뀜\r\n    switch (action.type) {\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(action.data.content);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}