{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","delay","put","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","shortid","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","delete","removePost","REMOVE_POST_OF_ME","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/web/MyPortfolio/nodebird2/front/sagas/post.js"],"sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}