{"ast":null,"code":"import { all, fork, delay, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"names":["all","fork","delay","put","takeLatest","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","loadPostsAPI","data","get","loadPosts","action","type","err","response","addPostAPI","post","addPost","id","generate","content","removePostAPI","delete","removePost","console","error","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/web/MyPortfolio/nodebird2/front/sagas/post.js"],"sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  delay,\r\n  put,\r\n  takeLatest,\r\n  throttle,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  generateDummyPost,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/api/post\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    // const result = yield call(loadPostsAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}